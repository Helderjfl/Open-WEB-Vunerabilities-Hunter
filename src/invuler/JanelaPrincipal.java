package invuler;

import JavaLanguageModule.JavaModuleForTreatment;
import SRV.*;
import Reports.ColorPane;
import Reports.Funcoes;
import java.io.*;
import java.io.File;
import java.io.Serializable;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.JOptionPane;

/**
 * 
 * @author Helder
 */
public class JanelaPrincipal extends javax.swing.JFrame implements Serializable {

    /** Creates new form JanelaPrincipal */
    public JanelaPrincipal() {
        initComponents();
    }
    ChoiceOfModule windowModule = new ChoiceOfModule(this, true);
    identification module = new identification();
    relationship module_SQL = new relationship();
    LinkedList<String> vulnerabilitiesFound = new LinkedList();
    Funcoes color = new Funcoes();
    JanelaRelatorio tbSearch = new JanelaRelatorio();
    private int num_Module = -1;
    private String name_Module = "";
    private String code = "";
    private String originalCode = "";
    String path = "";
    private int numLines = 0;
    private boolean iterationUser = false;
    private boolean sqlInjection = false;

    ////////////////////////////HELDER - CÓDIGO/////////////////////////
    JavaModuleForTreatment javaModule = new JavaModuleForTreatment();
    ////////////////////////////HELDER - CÓDIGO/////////////////////////

    /**
     * 
     * @return return the stats if the Iteration User is active os not
     */
    public boolean isIterationUser() {
        return iterationUser;
    }

    /**
     * Sets if the Iteration User is active or not (The option to define if the user will interact with the results os not)
     * @param iterationUser
     */
    public void setIterationUser(boolean iterationUser) {
        this.iterationUser = iterationUser;
    }

    /**
     * 
     * @return Return the original code.
     */
    public String getOriginalCode() {
        return originalCode;
    }

    /**
     * Sets the original code.
     * 
     * @param OriginalCode is used to pass the original code.
     */
    public void setOriginalCode(String OriginalCode) {
        this.originalCode = OriginalCode;
    }

    /**
     * 
     * @return Return the modified code.
     */
    public String getCode() {
        return code;
    }

    /**
     * Used to set the modified code.
     * 
     * @param code is used to set the modified code.
     */
    public void setCode(String code) {
        this.code = code;
    }

    /**
     * 
     * @return Return the module name choosed by the user.
     */
    public String getName_Module() {
        return name_Module;
    }

    /**
     * Sets the module name choosed by the user (like Java, PHP, Asp.net,...).
     * 
     * @param name_Module the Module Name choosed by the user.
     */
    public void setName_Module(String name_Module) {
        this.name_Module = name_Module;
    }

    /**
     * 
     * @return Return the number of the module.
     */
    public int getNum_Module() {
        return num_Module;
    }

    /**
     * Sets the number of the module.
     * 
     * @param module is the number of the module.
     */
    public void setNum_Module(int module) {
        this.num_Module = module;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moduloPHP = new invuler.ModuloJava();
        moduloASP = new invuler.ModuloJava();
        moduloJavaScript = new invuler.ModuloJava();
        moduloJava = new invuler.ModuloJava();
        bt_Analisar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tx_Code = new javax.swing.JTextPane();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        menu_Iteracao = new javax.swing.JMenuItem();
        menu_ChoiceModule = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        bt_Analisar.setText("Analisar");
        bt_Analisar.setToolTipText("Escolha um módulo para análise em Ferramentas.");
        bt_Analisar.setEnabled(false);
        bt_Analisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_AnalisarActionPerformed(evt);
            }
        });

        jButton2.setText("Relatório");
        jButton2.setToolTipText("Exibir relátorio da análise.");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.setName("Sistema de Rastreamento de Vulnerabilidades"); // NOI18N

        tx_Code.setToolTipText("Cole o código fonte aqui.");
        jScrollPane1.setViewportView(tx_Code);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
        );

        jMenuBar1.setName("Sistema de Rastreamento De Vulnerabilidades"); // NOI18N

        jMenu1.setText("Arquivo");

        jMenuItem2.setText("Abrir Códigos");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setText("Sair");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editar");
        jMenuBar1.add(jMenu2);

        jMenu4.setText("Ferramentas");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });

        menu_Iteracao.setText("Iteração com Usuário");
        menu_Iteracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_IteracaoActionPerformed(evt);
            }
        });
        jMenu4.add(menu_Iteracao);

        menu_ChoiceModule.setText("Módulo de Análise");
        menu_ChoiceModule.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menu_ChoiceModuleMousePressed(evt);
            }
        });
        menu_ChoiceModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_ChoiceModuleActionPerformed(evt);
            }
        });
        jMenu4.add(menu_ChoiceModule);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(341, 341, 341)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bt_Analisar)
                .addGap(350, 350, 350))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(bt_Analisar)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_AnalisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_AnalisarActionPerformed
        setCode(tx_Code.getText());
        setOriginalCode(tx_Code.getText());
        setNumLines(getOriginalCode());
        contr_LoadsCommunications();
        contr_Informations();

        if (module_SQL.getVariablesOfSql().size() > 0) {
            exec_isVulnerable();
            System.out.println("RECUPERACAO DOS IDENTIFICADORES DA TABELA HASH OK");
            setCode(module.recoverIdentifiers(getCode()));//recupara identificadores
            tx_Code.setText(String.valueOf(getCode()));
            if (isIterationUser()) {
                LinkedList<String> methodsInvalid = new LinkedList();
                methodsInvalid = module_SQL.questionAboutTheMethods();
                System.out.println("METODOS QUE NAO REALIZAM TRATAMENTO");
                for (int i = 0; i < methodsInvalid.size(); i++) {
                    System.out.println(methodsInvalid.get(i));
                }
            }

        } else {
            sqlInjection = true;
            color.pintatokens(moduloJava.getReservedWords(), getOriginalCode()); // realiza a compilacao
        }



        LinkedList listaChavesEncontrada = new LinkedList();
        escreveResultados();

        //if (module_SQL.getSendToTheModule().size() > 0) {
            if (module_SQL.getSendToTheModule().size() > 0) { // se usuario nao cancelo ou nao deu ok sem digitar nada
                LinkedList<String> linesOK = new LinkedList();
                linesOK = module_SQL.getSendToTheModule();
                linesOK = tratamentoParaPrint(linesOK);

                for (int i = 0; i < module_SQL.getMethodsOfSql().size(); i++) {
                    linesOK.addLast(module_SQL.getMethodsOfSql().get(i));
                }
                for (int i = 0; i < linesOK.size(); i++) {
                    linesOK.set(i, module.recoverIdentifiers(linesOK.get(i)));
                }

                listaChavesEncontrada = color.procuraChave(originalCode, linesOK, moduloJava.getReservedWords());// busca todas as palavras encontradas
                //tbSearch.setVisible(true);
                tbSearch.inserir(listaChavesEncontrada);
                //tbSearch.status(getName_Module(), getNumLines());
                //insere todas as palavras na tabela
            }else{
                tbSearch.setCommentary("Não foi encontrado nenhuma vulnerabilidade.");
            }
            //tx_Code.setText("");
            //tx_Code.add(color.getPane());
        //}
        tx_Code.setText("");
        tx_Code.add(color.getPane());
        tbSearch.setVisible(true);
        tbSearch.status(getName_Module(), getNumLines());
        
        //pinta ocorrencia modulo
  /*      Funcoes procura= new Funcoes();
        String palavra =null;
        LinkedList listaChavesEncontrada = new LinkedList();

        palavra = JOptionPane.showInputDialog(null); // recebe palavra ou expressao a ser encontrada


        if (palavra != null && !palavra.equals("")){ // se usuario nao cancelo ou nao deu ok sem digitar nada
        listaChavesEncontrada = procura.procuraChave(OriginalCode,palavra,moduloJava.getReservedWords());// busca todas as palavras encontradas


        JanelaRelatorio tbBusca = new JanelaRelatorio();
        tbBusca.setVisible(true);

        tbBusca.inserir(listaChavesEncontrada);
        //insere todas as palavras na tabela
        }
        tx_Code.setText("");
        tx_Code.add(procura.getPane());
         */
    }//GEN-LAST:event_bt_AnalisarActionPerformed

    private void menu_ChoiceModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_ChoiceModuleActionPerformed
        windowModule.setVisible(true);
        setNum_Module(windowModule.getPos());
        setName_Module(windowModule.getModule());
        if (getNum_Module() != -1) {
            bt_Analisar.setEnabled(true);
        }
    }//GEN-LAST:event_menu_ChoiceModuleActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        tbSearch.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
    }//GEN-LAST:event_jMenu4ActionPerformed

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
    }//GEN-LAST:event_jMenu4MouseClicked

    private void menu_ChoiceModuleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_ChoiceModuleMousePressed
    }//GEN-LAST:event_menu_ChoiceModuleMousePressed

    private void menu_IteracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_IteracaoActionPerformed
        if (isIterationUser()) {
            setIterationUser(false);
            JOptionPane.showMessageDialog(rootPane, "Modo Usuario Desligado");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Modo Usuario Ligado");
            setIterationUser(true);
        }
    }//GEN-LAST:event_menu_IteracaoActionPerformed

    //File[] file;
    File file;
    FileReader leitor;
    BufferedReader BufferLeitor;
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(true);
        fc.setDialogType(JFileChooser.OPEN_DIALOG);
        fc.setDialogTitle("Abrir Arquivo");
        int returnVal = fc.showDialog(this,null);
        if (returnVal == JFileChooser.APPROVE_OPTION){
           
     
            file = fc.getSelectedFile();
            System.out.println(file.toString());     
                try {
                    tx_Code.read(new FileReader(file.getAbsolutePath()), null);
                   
                        /*StringBuilder texto = new StringBuilder();
                        for (int i = 0; i < file.length;i++){
                            //leitor = new FileReader("C:\\Users\\Helder\\Documents\\analise.java");
                            //leitor =

                            tx_Code.read(new FileReader(file.getAbsolutePath()), null);
                            
                            BufferLeitor = new BufferedReader(leitor);
                            try {
                                while(BufferLeitor.ready()){                            
                                    texto.append(BufferLeitor.readLine()).append('\n');
                                                                
                                }    
                            } catch (IOException ex) {
                                Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        */
                    /*    try {
                            leitor.close();
                            BufferLeitor.close();
                        } catch (IOException ex) {
                            Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        tx_Code.setText(String.valueOf(texto));
                      */
                } catch (IOException ex) {
                    Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }          
        } 
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * 
     * @param args
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new JanelaPrincipal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_Analisar;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem menu_ChoiceModule;
    private javax.swing.JMenuItem menu_Iteracao;
    private invuler.ModuloJava moduloASP;
    private invuler.ModuloJava moduloJava;
    private invuler.ModuloJava moduloJavaScript;
    private invuler.ModuloJava moduloPHP;
    private javax.swing.JTextPane tx_Code;
    // End of variables declaration//GEN-END:variables

    private void contr_LoadsCommunications() {

        switch (getNum_Module()) {
            case 0: {
                //////define as palavras chaves, os hashcodes de algumas palavras que é necessário para substituir nas strings "****"
                moduloJava.reset();
                //deve ser refeito para obter informacao do módulo ao inves da ferramenta geral
                module.setHashTableIdentifiers(moduloJava.getHashTableIdentifiers());
                //path= JOptionPane.showInputDialog(rootPane, "DIGITE O CAMINHO DO JAVADOC DA CLASSE");
                //path= JOptionPane.showInputDialog(rootPane, "Identifique o caminho do javadoc da classe");
                // if(path!=null){
                //module.identifyListOfMethods(path);
                //module.identifiesMethodsName();
                // module.setNamesOfMethods(module_SQL.removeRepeatedOccurrences(module.getNamesOfMethods()));
                // }
                module.setHashTableMarkers(moduloJava.getHashTableMarkers());
                module.setHashTableConvert(moduloJava.getHashTableConvert());

                //acaba aqui
            }
            break;
            case 1: {
                moduloPHP.reset();

            }
            break;
            case 2: {
                moduloASP.reset();

            }
            break;
            case 3: {
                moduloJavaScript.reset();

            }
            break;
            //colocar modulos sem nada na pasta
            //com a criacao de novos modulos substitui-lo na pasta
        }
    }

    private void escreveResultados() {
        LinkedList<String> aux = new LinkedList();
        System.out.println("Identificacao de escopos");
        aux = module.getNumOfScope(); //SEND TO MODULE
        for (int i = 0; i < aux.size(); i++) {
            System.out.println(aux.get(i));
        }
        System.out.println("RESULTADOS:");

        aux = module.getListOfVariables();//VARIAVEIS
        System.out.println("LISTA DE VARIAVEIS");
        System.out.println(aux.size());
        for (int i = 0; i < aux.size(); i++) {
            System.out.println(aux.get(i));
        }
        System.out.println("LISTA DE METODOS");
        aux = module.getListOfMethods(); //Methods
        for (int i = 0; i < aux.size(); i++) {
            System.out.println(aux.get(i));
        }
        System.out.println("HIERARQUIA DE ESCOPOS");
        aux = module.getListHierarchyScopes();//HIERARQUIA DE ESCOPOS
        for (int i = 0; i < aux.size(); i++) {
            System.out.println(aux.get(i));
        }
        System.out.println("CODIGO DE CADA ESCOPO");
        aux = module.getCodeForEachScope();//CODIGO DE CADA ESCOPO
        for (int i = 0; i < aux.size(); i++) {
            System.out.println(aux.get(i));
        }
        System.out.println("SQL`S ENCONTRADAS");
        aux = module_SQL.getLinesToAnalyze();//SQL
        for (int i = 0; i < aux.size(); i++) {
            System.out.println(aux.get(i));
        }
        System.out.println("VARIAVEIS ANALISADAS");
        aux = module_SQL.getVariablesOfSql();//VARIAVEIS E METODOS ANALISADOS
        for (int i = 0; i < aux.size(); i++) {
            System.out.println(aux.get(i));
        }
        System.out.println("METODOS ANALISADOS");
        aux = module_SQL.getMethodsOfSql();//VARIAVEIS E METODOS ANALISADOS
        for (int i = 0; i < aux.size(); i++) {
            System.out.println(aux.get(i));
        }
        System.out.println("ENVIAR A FERRAMENTA GERAL LINHAS RELEVANTES");
        aux = module_SQL.getSendToTheModule(); //SEND TO MODULE
        for (int i = 0; i < aux.size(); i++) {
            System.out.println(aux.get(i));
        }
        System.out.println("ENVIAR A FERRAMENTA GERAL METODOS UTILIZADOS");
        aux = module_SQL.getSendToTheModuleMethod();//SEND TO MODULE METHOD
        for (int i = 0; i < aux.size(); i++) {
            System.out.println(aux.get(i));
        }


    }

    private void contr_Informations() {

        setCode(module.numberOfLines(getCode()));//Insere numeros nas linhas do código
        tx_Code.setText(String.valueOf(getCode()));
        setCode(module.ignoreComments(getCode())); //////remove comentários e trata as strings dentro de ' e ", substituindo as palavras
                                                   //////reservadas por seu hashcode correspondente
        tx_Code.setText(String.valueOf(getCode()));//Remove comentários exceto das linhas escolhidas
          //System.out.println("ignoreComments!!!!"+getCode());
        System.out.println("REMOVE COMENTARIOS OK");
        setCode(module.makeIdentification(getCode()));//Identifica todos os escopos
        tx_Code.setText(String.valueOf(getCode()));
          System.out.println(getCode()+"makeIdentification");
        System.out.println("ESCOPOS OK");
        setCode(module.markingIdentifiers(getCode(), moduloJava.getIdentifiersDisplacement()));//Marca identificadores Falsos
        tx_Code.setText(String.valueOf(getCode()));
        //System.out.println(getCode());
        System.out.println("IDENTIFICADORES OK");
        setCode(module.relocateScope(getCode()));//Realoca escopos para encontrar variaveis
        tx_Code.setText(String.valueOf(getCode()));
        // System.out.println(getCode());
        System.out.println("REALOCACAO DE ESCOPOS OK");
        module.variablesFound(getCode(), moduloJava.getPrimitiveTypes());//Encontra variaveis
        tx_Code.setText(String.valueOf(getCode()));
        // System.out.println(getCode());
        System.out.println("IDENTIFICACAO DE VARIAVEIS OK");
        //////faz com que métodos declarados em multiplas linhas fiquem em apenas uma linha
        module.identifyListOfMethods();
        //escreveResultados();
        //////pega os nomes dos métodos e os coloca na lista namesOfMethods
        module.identifiesMethodsName();
        //////remove os nomes de métodos repetidos na lista
        module.setNamesOfMethods(module_SQL.removeRepeatedOccurrences(module.getNamesOfMethods()));
        //remove metodos repetidos, a validacao de sobrecarga cuidadra para identificaçao do metodo correto
        System.out.println("IDENTIFICAÇAO DOS METODOS OK");
        //////Pega os comandos SQL existentes no código e os coloca na lista LinesToAnalyze
        module_SQL.locatedSQL(getCode(), moduloJava.getSqlIdentifiers());//Localiza SQL
        System.out.println("LOCALIZA SQL OK");
        if (module_SQL.getLinesToAnalyze().size() > 0) {
            //////pega as variáveis dos comandos SQL
            module_SQL.locatesVariablesInSql(module); // Localiza variaveis nas SQL
            System.out.println("IDENTIFICACAO DE VARIAVEIS OK");
        }

    }

    private void exec_isVulnerable() {
        module_SQL.storageHierarchyOccurrences(getCode(), module.getCodeForEachScope(), module.getListHierarchyScopes(), module.getListOfVariables(), module.getNamesOfMethods());
        System.out.println("HIERARQUIA DE OCORRENCIAS OK"); //Armazena Hierarquia de ocorrencias
        //module_SQL.setSendToTheModule(module_SQL.removeRepeatedOccurrences(module_SQL.getSendToTheModule()));
//System.out.println("REMOCAO DE OCORRENCIA REPETIDAS OK");//Remove ocorrencias repetidas das linhas com vulnerabilidades

        module_SQL.identifiesMethodInLine(module.getNamesOfMethods());
        //////coloca o método removido de volta em partes
        module_SQL.scopeAndLineOfMethodSQL();
        //////pega o escopo, nome do método e os tipos das variáveis do parâmetro
        module.identifyOnlyVariablesOnMethods(module_SQL.getMethodsOfSql());

        ///////////continuar daqui
        module_SQL.codeOfMethodsToAnalysis(module.getNamesOfMethods(), module.getCodeForEachScope(), module.getListOfMethods(), module.getPreparationMethodForAnalyzing());


        module_SQL.insertMethodsToSendModule(getOriginalCode());
        module_SQL.setSendToTheModule(module_SQL.removeRepeatedOccurrences(module_SQL.getSendToTheModule()));
        module_SQL.setLinesToAnalyze(module_SQL.removeRepeatedOccurrences(module_SQL.getLinesToAnalyze()));
        module_SQL.setMethodsOfSql(module_SQL.removeRepeatedOccurrences(module_SQL.getMethodsOfSql()));
        module_SQL.setVariablesOfSql(module_SQL.removeRepeatedOccurrences(module_SQL.getVariablesOfSql()));
        module_SQL.setSendToTheModuleMethod(module_SQL.removeRepeatedOccurrences(module_SQL.getSendToTheModuleMethod()));
        System.out.println("REMOCAO DE OCORRENCIA REPETIDAS OK");//Remove ocorrencias repetidas das linhas com vulnerabilidades

        switch (getNum_Module()) {
            case 0: {
                //vulnerabilitiesFound = moduloJava.runSqlInjection(module_SQL.getSendToTheModule());
                System.out.println("////////////////////////////////|||||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");
                javaModule.SqlInjectionSearch(module_SQL.getSendToTheModule(),module.getListOfVariables(),module_SQL.getVariablesOfSql(),
                        module.getListOfMethods(),module.getNamesOfMethods(),module.getCodeForEachScope(),module.getListHierarchyOfScopes(),
                        moduloJava.getSqlIdentifiers());
                LinkedList aux = javaModule.vulnerabilitiesFound_SQLCode();
                //for (int i=0; i < aux.size();i++)
                //    JOptionPane.showMessageDialog(rootPane, aux.get(i));
                    
                module_SQL.setSendToTheModule(javaModule.vulnerabilitiesFound_SQLCode());
                tbSearch.setReportInfo(javaModule.vulnerabilitiesFound_Variable(), javaModule.vulnerabilitiesFound_Commentary());
                //moduloJava.getSqlIdentifiers(),module.getNumOfScope()
            }
            break;
            case 1: {
            }
            break;
            case 2: {
            }
            break;
            case 3: {
            }
            break;
        }




        /*
        for(int i=0; i<module_SQL.getSendToTheModule().size();i++){
        boolean eai= false;
        eai = module.identifiesMethodInLine(module_SQL.getSendToTheModule().get(i),methods);
        if(eai){
        JOptionPane.showMessageDialog(rootPane,"DEU CERTO");
        }
        }
         */

    }

    private void setNumLines(String originalCode) {
        String line[];
        line = originalCode.split("\n");
        numLines = line.length;
    }

    private int getNumLines() {
        return numLines;
    }

    private LinkedList<String> tratamentoParaPrint(LinkedList<String> linesOK) {
        for (int i = 0; i < linesOK.size(); i++) {
            if (linesOK.get(i).indexOf("## ") != -1) {
                linesOK.set(i, linesOK.get(i).substring(linesOK.get(i).indexOf("## ") + 3));
            }
            linesOK.set(i, linesOK.get(i).replace("@59@", ";"));
        }
        return linesOK;
    }
    
    
}